function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

module.exports.usage = `Run a service locally

Usage: api local <endpoint> [arg1=val1, arg2=val2...argn=valn]

Runs your api locally. Useful for testing changes before deploying`;

module.exports.category = 'using';
module.exports.weight = 2;

const utils = require('../utils/utils');
const { convertToFileType } = require('../utils/file-utils');
const handler = require('../utils/handler');

module.exports.aliases = ['invoke-local', 'dev'];

module.exports.run = (() => {
  var _ref = _asyncToGenerator(function* (args) {
    let data = utils.parseArgs(args.splice(2));

    data = yield convertToFileType(data);

    const errors = utils.buildErrors();

    const event = {
      name: args[1],
      data,
      errors
    };

    handler.go(event, undefined, function (err, response) {
      if (err) {
        const parsedError = JSON.parse(err);
        console.log(parsedError);
      } else if (Buffer.isBuffer(response)) {
        process.stdout.write(response);
      } else {
        console.log(response);
      }
    });
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();